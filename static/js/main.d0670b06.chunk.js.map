{"version":3,"sources":["components/Counter.jsx","components/Foo.jsx","components/GHBadge.jsx","logo.svg","App.jsx","reportWebVitals.js","index.jsx"],"names":["Counter","useState","count","setCount","href","onClick","Foo","props","state","isHidden","this","setState","currentState","showHide","text","React","Component","GHBadge","username","repoName","repoUrl","badgeUrl","altText","src","alt","App","className","logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAEe,SAASA,IAAW,IAAD,EACNC,mBAAS,GADH,mBACzBC,EADyB,KAClBC,EADkB,KAGhC,OACE,gCACE,mDAEA,+DAEA,yEAC2C,IACzC,mBAAGC,KAAK,4CAAR,kCAEO,IAJT,eAQA,6CAAgBF,EAAhB,YAEA,wBAAQG,QAAS,kBAAMF,EAASD,EAAQ,IAAxC,yB,gCCnBeI,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,UAAU,GAJK,E,4CAQnB,WACEC,KAAKC,UAAS,SAACC,GAAD,MAAmB,CAC/BH,UAAWG,EAAaH,e,oBAI5B,WAAU,IAAD,OACP,OACE,gCACE,kDAEA,0DAEA,wBAAQJ,QAAS,kBAAM,EAAKQ,YAA5B,oBAEA,6BAAKH,KAAKF,MAAMC,UAAYC,KAAKH,MAAMO,c,GAxBdC,IAAMC,WCFxB,SAASC,EAAQV,GAAQ,IAC9BW,EAAuBX,EAAvBW,SAAUC,EAAaZ,EAAbY,SAEZC,EAAO,6BAAyBF,EAAzB,YAAqCC,GAC5CE,EAAQ,iDAA6CH,EAA7C,oBAAiEC,EAAjE,2BACRG,EAAO,UAAMJ,EAAN,cAAoBC,GAEjC,OACE,mBAAGf,KAAMgB,EAAT,SACE,qBAAKG,IAAKF,EAAUG,IAAKF,MCThB,UAA0B,iCCM1B,SAASG,IACtB,OACE,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKH,IAAKI,EAAMD,UAAU,WAAWF,IAAI,SAEzC,kDACA,6EAEA,cAACP,EAAD,CAASC,SAAS,gBAAgBC,SAAS,wBAG7C,gCACE,cAACnB,EAAD,IAEA,cAAC,EAAD,CAAKc,KAAK,iBACV,uBACA,6B,UCXOc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d0670b06.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <h2>Counter component</h2>\n\n      <p>A simple functional component.</p>\n\n      <p>\n        We increment a numeric counter, based on{\" \"}\n        <a href=\"https://reactjs.org/docs/hooks-state.html\">\n          Using the State Hook\n          </a>{\" \"}\n          tutorial.\n        </p>\n\n      <p>You clicked {count} times</p>\n\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default class Foo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isHidden: false,\n    };\n  }\n\n  showHide() {\n    this.setState((currentState) => ({\n      isHidden: !currentState.isHidden,\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Toggle component</h2>\n\n        <p>A simple class component.</p>\n\n        <button onClick={() => this.showHide()}>Toggle</button>\n\n        <p>{!this.state.isHidden && this.props.text}</p>\n      </div>\n    );\n  }\n}\n","export default function GHBadge(props) {\n  const { username, repoName } = props;\n\n  const repoUrl = `https://github.com/${username}/${repoName}`;\n  const badgeUrl = `https://img.shields.io/static/v1?label=${username}&message=${repoName}&color=blue&logo=github`;\n  const altText = `${username} - ${repoName}`;\n\n  return (\n    <a href={repoUrl}>\n      <img src={badgeUrl} alt={altText} />\n    </a>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import \"./App.css\";\nimport Counter from \"./components/Counter\";\nimport Foo from \"./components/Foo\";\nimport GHBadge from \"./components/GHBadge\";\nimport logo from \"./logo.svg\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <h1>React Quickstart</h1>\n        <p>A template project hosted hosted on GH Pages</p>\n\n        <GHBadge username=\"MichaelCurrin\" repoName=\"react-quickstart\" />\n      </header>\n\n      <div>\n        <Counter />\n\n        <Foo text=\"Dynamic text\" />\n        <br />\n        <br />\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}